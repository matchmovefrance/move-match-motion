
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.49.9";
import jsPDF from "https://esm.sh/jspdf@2.5.1";

const supabase = createClient(
  Deno.env.get("SUPABASE_URL") ?? "",
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
);

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface QuoteEmailRequest {
  clientName: string;
  clientEmail: string;
  quoteAmount: number;
  desiredDate: string;
  pdfBase64?: string;
  clientPhone?: string;
  departureAddress?: string;
  departurePostalCode?: string;
  departureCity?: string;
  arrivalAddress?: string;
  arrivalPostalCode?: string;
  arrivalCity?: string;
  estimatedVolume?: number;
}

const generatePDFBase64 = async (emailData: QuoteEmailRequest, companySettings: any): Promise<string> => {
  const doc = new jsPDF();
  
  // En-t√™te avec fond vert
  doc.setFillColor(34, 197, 94);
  doc.rect(0, 0, 210, 40, 'F');
  
  // Titre de l'entreprise
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.text(companySettings.company_name, 20, 25);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text('Solutions de d√©m√©nagement', 20, 32);
  
  // Titre du document
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('DEVIS DE D√âM√âNAGEMENT', 20, 60);
  
  // Informations de la soci√©t√©
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(100, 116, 139);
  doc.text(companySettings.company_name, 140, 60);
  doc.text(`Email: ${companySettings.company_email}`, 140, 67);
  doc.text(`T√©l√©phone: ${companySettings.company_phone}`, 140, 74);
  if (companySettings.company_address) {
    doc.text(`Adresse: ${companySettings.company_address}`, 140, 81);
  }
  
  // Ligne de s√©paration
  doc.setDrawColor(200, 200, 200);
  doc.line(20, 90, 190, 90);
  
  // Informations client
  doc.setTextColor(34, 197, 94);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('INFORMATIONS CLIENT', 20, 105);
  
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  let yPos = 115;
  
  if (emailData.clientName) {
    doc.text(`Nom: ${emailData.clientName}`, 20, yPos);
    yPos += 7;
  }
  
  if (emailData.clientEmail) {
    doc.text(`Email: ${emailData.clientEmail}`, 20, yPos);
    yPos += 7;
  }
  
  if (emailData.clientPhone) {
    doc.text(`T√©l√©phone: ${emailData.clientPhone}`, 20, yPos);
    yPos += 7;
  }
  
  // D√©tails du d√©m√©nagement
  yPos += 10;
  doc.setTextColor(34, 197, 94);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('D√âTAILS DU D√âM√âNAGEMENT', 20, yPos);
  
  yPos += 10;
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  // Adresses
  doc.text('Adresse de d√©part:', 20, yPos);
  yPos += 7;
  const departureAddr = `${emailData.departureAddress || ''} ${emailData.departurePostalCode || ''} ${emailData.departureCity || ''}`.trim();
  doc.text(departureAddr, 25, yPos);
  
  yPos += 10;
  doc.text('Adresse d\'arriv√©e:', 20, yPos);
  yPos += 7;
  const arrivalAddr = `${emailData.arrivalAddress || ''} ${emailData.arrivalPostalCode || ''} ${emailData.arrivalCity || ''}`.trim();
  doc.text(arrivalAddr, 25, yPos);
  
  yPos += 10;
  doc.text(`Date souhait√©e: ${new Date(emailData.desiredDate).toLocaleDateString('fr-FR')}`, 20, yPos);
  
  if (emailData.estimatedVolume) {
    yPos += 7;
    doc.text(`Volume estim√©: ${emailData.estimatedVolume} m¬≥`, 20, yPos);
  }
  
  // Prix
  if (emailData.quoteAmount) {
    yPos += 20;
    
    // Encadr√© pour le prix avec fond vert clair
    doc.setFillColor(240, 253, 244);
    doc.rect(20, yPos - 5, 170, 25, 'F');
    doc.setDrawColor(34, 197, 94);
    doc.rect(20, yPos - 5, 170, 25);
    
    doc.setTextColor(34, 197, 94);
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('MONTANT DU DEVIS', 25, yPos + 5);
    
    doc.setFontSize(20);
    doc.text(`${emailData.quoteAmount.toFixed(2).replace('.', ',')} ‚Ç¨`, 25, yPos + 15);
  }
  
  // Conditions
  yPos += 40;
  doc.setTextColor(100, 116, 139);
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  doc.text('Conditions g√©n√©rales:', 20, yPos);
  yPos += 5;
  doc.text('‚Ä¢ Ce devis est valable 30 jours √† compter de sa date d\'√©mission', 20, yPos);
  yPos += 4;
  doc.text('‚Ä¢ Les prix sont exprim√©s en euros TTC', 20, yPos);
  yPos += 4;
  doc.text('‚Ä¢ Une confirmation √©crite est requise pour valider la prestation', 20, yPos);
  
  // Pied de page
  doc.setTextColor(100, 116, 139);
  doc.setFontSize(8);
  doc.text(`Devis g√©n√©r√© le ${new Date().toLocaleDateString('fr-FR')}`, 20, 280);
  doc.text(`${companySettings.company_name} - Solutions de d√©m√©nagement professionnelles`, 20, 285);
  
  // Retourner le PDF en base64
  return doc.output('datauristring').split(',')[1];
};

const sendEmailSMTP = async (emailData: QuoteEmailRequest, companySettings: any, pdfBase64: string) => {
  // V√©rifier que SMTP est configur√©
  if (!companySettings.smtp_enabled || 
      !companySettings.smtp_host || 
      !companySettings.smtp_username || 
      !companySettings.smtp_password) {
    throw new Error('Configuration SMTP incompl√®te. Veuillez configurer le SMTP dans les param√®tres admin.');
  }

  console.log("üìß Configuration SMTP:", {
    host: companySettings.smtp_host,
    port: companySettings.smtp_port,
    username: companySettings.smtp_username,
    secure: companySettings.smtp_secure
  });

  // Pr√©parer le contenu HTML de l'email
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background-color: #22c55e; color: white; padding: 20px; text-align: center; }
        .content { padding: 20px; }
        .footer { background-color: #f8f9fa; padding: 15px; text-align: center; color: #666; }
        .highlight { background-color: #f0fdf4; padding: 15px; border-left: 4px solid #22c55e; margin: 20px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${companySettings.company_name}</h1>
        <p>Solutions de d√©m√©nagement professionnelles</p>
    </div>
    
    <div class="content">
        <p>Bonjour ${emailData.clientName || 'Madame, Monsieur'},</p>
        
        <p>Nous avons le plaisir de vous transmettre votre devis personnalis√© pour votre projet de d√©m√©nagement.</p>
        
        <div class="highlight">
            <h3>üìã D√âTAILS DE VOTRE DEMANDE :</h3>
            <ul>
                <li><strong>Date souhait√©e :</strong> ${new Date(emailData.desiredDate).toLocaleDateString('fr-FR')}</li>
                <li><strong>Montant du devis :</strong> ${emailData.quoteAmount.toFixed(2).replace('.', ',')} ‚Ç¨ TTC</li>
            </ul>
        </div>
        
        <p>üìé Vous trouverez en pi√®ce jointe votre devis d√©taill√© au format PDF.</p>
        
        <p>Ce devis est valable 30 jours √† compter de sa date d'√©mission.</p>
        
        <p>Cordialement,<br>L'√©quipe ${companySettings.company_name}</p>
        
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p><strong>üìû T√©l√©phone :</strong> ${companySettings.company_phone}<br>
            <strong>üìß Email :</strong> ${companySettings.company_email}<br>
            <strong>üìç Adresse :</strong> ${companySettings.company_address}</p>
        </div>
    </div>
    
    <div class="footer">
        <p>${companySettings.company_name} - Solutions de d√©m√©nagement professionnelles</p>
    </div>
</body>
</html>`;

  // Configuration de l'email pour SMTP
  const boundary = '----=_NextPart_' + Math.random().toString(36).substr(2, 9);
  
  const emailBody = [
    `Content-Type: multipart/mixed; boundary="${boundary}"`,
    `From: ${companySettings.company_name} <${companySettings.smtp_username}>`,
    `To: ${emailData.clientEmail}`,
    `Subject: =?UTF-8?B?${btoa(`Votre devis de d√©m√©nagement du ${new Date(emailData.desiredDate).toLocaleDateString('fr-FR')}`)}?=`,
    `MIME-Version: 1.0`,
    '',
    `--${boundary}`,
    `Content-Type: multipart/alternative; boundary="${boundary}_alt"`,
    '',
    `--${boundary}_alt`,
    `Content-Type: text/html; charset=UTF-8`,
    `Content-Transfer-Encoding: quoted-printable`,
    '',
    htmlContent,
    '',
    `--${boundary}_alt--`,
    '',
    `--${boundary}`,
    `Content-Type: application/pdf; name="devis.pdf"`,
    `Content-Transfer-Encoding: base64`,
    `Content-Disposition: attachment; filename="devis_${emailData.clientName?.replace(/[^a-zA-Z0-9]/g, '_') || 'client'}_${new Date().toISOString().split('T')[0]}.pdf"`,
    '',
    pdfBase64,
    '',
    `--${boundary}--`
  ].join('\r\n');

  // Utiliser un service SMTP via API (comme SendGrid, Mailgun, etc.)
  // Ici on utilise une approche g√©n√©rique avec fetch
  const smtpApiUrl = `https://api.smtp2go.com/v3/email/send`;
  
  const smtpPayload = {
    api_key: companySettings.smtp_password, // Utiliser le mot de passe SMTP comme cl√© API
    to: [emailData.clientEmail],
    sender: companySettings.smtp_username,
    subject: `Votre devis de d√©m√©nagement du ${new Date(emailData.desiredDate).toLocaleDateString('fr-FR')}`,
    html_body: htmlContent,
    attachments: [{
      filename: `devis_${emailData.clientName?.replace(/[^a-zA-Z0-9]/g, '_') || 'client'}_${new Date().toISOString().split('T')[0]}.pdf`,
      fileblob: pdfBase64,
      mimetype: 'application/pdf'
    }]
  };

  console.log("üì§ Envoi via SMTP API");
  
  const response = await fetch(smtpApiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(smtpPayload)
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error("‚ùå Erreur SMTP:", errorText);
    throw new Error(`Erreur SMTP: ${response.status} - ${errorText}`);
  }

  const result = await response.json();
  console.log("‚úÖ Email envoy√© via SMTP:", result);
  
  return result;
};

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const emailData: QuoteEmailRequest = await req.json();
    const { clientName, clientEmail, quoteAmount, desiredDate } = emailData;

    console.log(`üìß Traitement envoi email pour: ${clientEmail}`);

    // R√©cup√©rer les param√®tres de l'entreprise (OBLIGATOIRE)
    const { data: settings, error: settingsError } = await supabase
      .from('company_settings')
      .select('*')
      .single();

    if (settingsError) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des param√®tres:", settingsError);
      throw new Error("Impossible de r√©cup√©rer les param√®tres de l'entreprise");
    }

    if (!settings) {
      throw new Error("Aucune configuration d'entreprise trouv√©e");
    }

    // V√©rifier la configuration SMTP
    if (!settings.smtp_enabled || !settings.smtp_host || !settings.smtp_username || !settings.smtp_password) {
      throw new Error("Configuration SMTP incompl√®te. Veuillez configurer le SMTP dans les param√®tres admin.");
    }

    console.log("‚úÖ Configuration SMTP trouv√©e et valid√©e");

    // G√©n√©rer le PDF
    const pdfBase64 = emailData.pdfBase64 || await generatePDFBase64(emailData, settings);

    // Envoyer l'email via SMTP
    const result = await sendEmailSMTP(emailData, settings, pdfBase64);

    console.log("‚úÖ Email envoy√© avec succ√®s via SMTP");

    return new Response(JSON.stringify({
      success: true,
      message: 'Email envoy√© avec succ√®s via SMTP',
      method: 'SMTP',
      details: result
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });

  } catch (error: any) {
    console.error("‚ùå Erreur dans send-quote-email:", error);
    return new Response(
      JSON.stringify({ 
        success: false,
        error: error.message,
        method: 'SMTP'
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
